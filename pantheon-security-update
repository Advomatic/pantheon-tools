#!/bin/bash
# pantheon-security-update
# Bash script to run security updates on a Pantheon site.

# Include all of the subscripts that we need.
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/functions/pantheon-script-colours"
. "$DIR/functions/pantheon-terminus-check"
. "$DIR/functions/pantheon-authenticate"
. "$DIR/functions/pantheon-choose-site"
. "$DIR/functions/pantheon-get-framework"
. "$DIR/functions/pantheon-multidev-create"
. "$DIR/functions/pantheon-cleanup-on-error"
. "$DIR/functions/pantheon-multidev-delete"
. "$DIR/functions/pantheon-multidev-merge"
. "$DIR/functions/pantheon-get-multidev-url"
. "$DIR/functions/pantheon-connection-mode"
. "$DIR/functions/drupal/drupal-get-drush-version"
. "$DIR/functions/drupal/drupal-check-features"
. "$DIR/functions/drupal/drupal-regenerate-features"
. "$DIR/functions/drupal/drupal-update"
. "$DIR/functions/wp/wp-update"

###
# Run security updates.
#
# @param string $SITENAME
#   The machine name of the site.
# @param string $FRAMEWORK
#   The framework of the site.
# @param string $MULTIDEV
#   The machine name of the multidev.
##
multidev_update() {
  local sitename=$1
  local framework=$2
  local multidev=$3
  local url=''
  get_multidev_url $sitename $multidev url

  case $framework in
    drupal)
      local drush_version=''
      drupal_get_drush_version $sitename $multidev drush_version
      local has_features=''
      drupal_check_features $sitename $multidev has_features
      drupal_update $sitename $multidev
      if [ "$has_features" == 1 ]; then
        drupal_regenerate_features $sitename $multidev
      fi
      ;;
    wordpress|wordpress_network)
      # @todo Check for WP-CFM (WP's version of config management), and check for overrides.
      wp_update $sitename $multidev
      # @todo If WP-CFM, then update config.
      ;;
    *)
      # drupal8
      echo -e "$framework is not yet supported.  Do whatever it is that you do to run security updates on the multi-site, then continue."
      echo -e "  $url"
      read -p "${UNDERLINE}Continue [${BOLD}y${NOBOLD}/n]${NOUNDERLINE} " continue;
      case $continue in
        [Nn])
          echo -e "You may run the \`pantheon-merge\` script when you are ready to merge and deploy."
          exit 0
          ;;
        *) ;;
      esac
      ;;
  esac

  echo -e ""
  echo -e "${UNDERLINE}Do you wish to merge this multidev into the dev environment?${NOUNDERLINE}"
  echo -e "Some common cases where you shouldn't:"
  echo -e "* If this was a wide-reacing change, and you are not familiar enough with the site to know if things are broken or not.  If so, then get the client to review."
  echo -e "* If deployments are always done in batches (e.g. Annenberg) and this should be included in the next batch."
  # @todo check for this.
  echo -e "* If there is undeployed code on the dev environment."
  read -p "${UNDERLINE}Merge?  [${BOLD}y${NOBOLD}/n]${NOUNDERLINE} " continue;
  case $continue in
    [Nn])
      echo -e "You may run the \`pantheon-merge\` script when you are ready to merge and deploy."
      exit 0
      ;;
    *) ;;
  esac
}

#set -x

terminus_check
terminus_authenticate
SITENAME=''
choose_site SITENAME
#SITENAME=heron
FRAMEWORK=''
get_framework $SITENAME FRAMEWORK
#FRAMEWORK=drupal

SUGGESTED_MULTIDEV='sec'`date "+%Y%m%d"`
MULTIDEV=''
multidev_create $SITENAME $FRAMEWORK $SUGGESTED_MULTIDEV MULTIDEV
#MULTIDEV=sec20170301
URL=''
get_multidev_url $SITENAME $MULTIDEV URL

connection_mode $SITENAME $MULTIDEV 'sftp'
multidev_update $SITENAME $FRAMEWORK $MULTIDEV
connection_mode $SITENAME $MULTIDEV 'git'

multidev_merge $SITENAME $FRAMEWORK $MULTIDEV
multidev_delete $SITENAME $MULTIDEV 1

echo -e "${UNDERLINE}Sorry, the deploying and backup part hasn't been written yet. Use the Pantheon dashboard. But also run \`drush cc all\`, \`drush updb\`, and \`drush fra\`${NOUNDERLINE}"
echo -e
echo -e "Thanks.  All done."

# @todo
# Deploy to the test env. (copying DB/Files from live)
# Pause again and ask to continue.
# A full backup of production database and files
# Deploy to live.
# Show the status report
#
# @todo Core updates via a terminus command rather than drush
# @todo Show `drush uli` links with all URLs.