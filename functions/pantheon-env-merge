#!/bin/bash

# Include all of the functions that we need.
FUNCTIONS_DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$FUNCTIONS_DIR" ]]; then FUNCTIONS_DIR="$PWD"; fi
. "$FUNCTIONS_DIR/pantheon-script-colours"
. "$FUNCTIONS_DIR/pantheon-error-no-cleanup"
. "$FUNCTIONS_DIR/drupal/drupal-check-if-module-installed"
. "$FUNCTIONS_DIR/drupal8/drupal8-config-import"

##
# Merge one environment to another.
#
# @param string $SITENAME
#   The machine name of the site.
# @param string $FRAMEWORK
#   The framework of the site.
# @param string $env_source
#   The machine name of the source environment.
# @param string $env_dest
#   The machine name of the destination environment.
#   Must be directly possible.  i.e. You can't go straight from dev to live, you
#   must first go through test.
##
env_merge() {
  local sitename=$1
  local framework=$2
  local env_source=$3
  local env_dest=$4

  terminus -q env:wake ${sitename}.${env_source}
  terminus -q env:wake ${sitename}.${env_dest}

  # @todo Ask to continue if there's undeployed code.  Test using `terminus env:code-log ${sitename}.dev`.

  # @todo Test for clean config in the destination.

  if [ "$env_source" == "dev" ] && [ "$env_dest" != "test" ]; then
    echo -e "First merging ${sitename}: ${env_source} to ${env_dest}."
    terminus multidev:merge-from-dev ${sitename}.${env_dest}
  elif [ "$env_dest" == "dev" ]; then
    echo -e "Merging ${sitename}: ${env_source} to ${env_dest}."
    terminus multidev:merge-to-dev ${sitename}.${env_source}
  else
    if [ "$env_dest" == 'live' ]; then
      read -p "${UNDERLINE}First backup the live database?:[${BOLD}y${NOBOLD}/n]${NOUNDERLINE} " backup;
      case $backup in
        [Nn]) ;;
        *)
          echo -e "Backing up."
          terminus backup:create ${sitename}.${env_dest} --element=database
          ;;
      esac
    fi

    synccontent=''
    if [ "$env_dest" == 'test' ]; then
      read -p "${UNDERLINE}First copy the database and files from live to test?:[${BOLD}y${NOBOLD}/n]${NOUNDERLINE} " sync;
      case $sync in
        [Nn]) ;;
        *)
          # @todo Instead of adding this flag, just do it manually.  Then we can tell if the deploy is taking
          #       a long time due to the sync, or because something strange is going on.
          synccontent='--sync-content'
          ;;
      esac
    fi

    echo -e "Typically include the ticket title and URL in the deploy message."
    read -p "${UNDERLINE}Deployment message:${NOUNDERLINE} " deploymessage;

    echo -e "Deploying ${sitename}: ${env_source} to ${env_dest}."
    terminus env:deploy ${sitename}.${env_dest} $synccontent --note "$deploymessage"
  fi

  if [ $? != 0 ]; then
    # @todo Different error handling for deploying.
    destination_branch=$env_dest
    merge_strategy='ours'
    if [ "$destination_branch" == "dev" ]; then
      destination_branch='master'
      merge_strategy='theirs'
    fi
    source_branch=$env_source
    if [ "$source_branch" == "dev" ]; then
      source_branch='master'
    fi
    error_no_cleanup "Error merging ${sitename}: ${env_source} to ${env_dest}.  If there were merge conflicts you will need to merge locally using \n  git checkout $destination_branch\n  git pull\n  git merge --no-ff --strategy=$merge_strategy origin/$source_branch\nFollow the instructions shown for resolving conflicts.\nRun the front-end or back-end build if the conflicts were in generated code.\nConfirm that everything works locally.\n  git push\nRe-run this script." 13
  fi

  echo -e "Clearing caches."
  terminus -q env:clear-cache ${sitename}.${env_dest}
  if [ "$env_dest" == "test" ] || [ "$env_dest" == "dev" ]; then
    echo -e "${PROTIP}Make note of whether any database updates happen.  If so you'll want to backup the production database when deploying."
  fi
  case $framework in
    drupal)
      echo -e "Checking for database updates."
      terminus drush ${sitename}.${env_dest} -- updatedb -y 2>&1 | fgrep -v 'This environment is in read-only Git mode'  | fgrep -v '[Exit: 0]'
      if [ $? != 0 ]; then
        error_no_cleanup "Error running drush updatedb." 14
      fi
      drupal_check_if_module_installed $sitename $env_dest "features"
      if [ $? == 1 ]; then
        echo -e "Reverting Features."
        terminus -q drush ${sitename}.${env_dest} -- features-revert-all -y
        if [ $? != 0 ]; then
          error_no_cleanup "Error running drush features-revert-all." 15
        fi
      fi
      ;;
    drupal8)
      echo -e "Checking for database updates."
      terminus drush ${sitename}.${env_dest} -- updatedb -y 2>&1 | fgrep -v 'This environment is in read-only Git mode' | fgrep -v '[Exit: 0]'
      if [ $? != 0 ]; then
        error_no_cleanup "Error running drush updatedb." 14
      fi
      drupal_config_import "$sitename" "$env_dest"
      ;;
    *)
      # @todo WP.
      # wordpress
      echo -e "$framework is not yet supported.  Do whatever it is that you do to update the database and revert configuration on the $env_dest site, then continue."
      echo -e "  http://${env_dest}-${sitename}.pantheonsite.io/"
      read -p "${UNDERLINE}Continue [${BOLD}y${NOBOLD}/n]${NOUNDERLINE} " continue;
      case $continue in
        [Nn]) error_no_cleanup "" 0 ;;
        *) ;;
      esac
      ;;
  esac
}
